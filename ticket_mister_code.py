# -*- coding: utf-8 -*-
"""Ticket_Mister_Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZkMRbLxMxSkWn3p_zR30C3MRKMUEXOsr

## **Ticket Mister**

First we will import all the datasets that we will be using. The dataset contains all the information of the disco clubs that we have selected. We have around 20 clubs and 10 variables which will help us to recommend the perfect club to our client defined as the 'SUBJECT'
"""

import pandas as pd
import numpy as np

df = pd.read_excel(r'Disco_df.xlsx')
df["Music type"]= df["Music type"].map(lambda x: x.strip(",")) # Separar los tipos de musica en una lista para que sean independientes.

"""Now we will create the object SUBJECT which will store all the attributes our client has. This way we can later compare subject attributes with the venues and find a matching venue that fits our client. """

#Funciones que trimmeen los strings y los datos:
# No hace falta, si se mejora, lo incluimos. 


def queue_trim(x):
    x = x.strip().lower()
    if x == 'high':
        return 3
    elif x == 'medium':
        return 2
    elif x == 'low':
        return 1

class Subject():
    def __init__(self,df):
        self.location = input("Where do you live? (centre, orense,...) ").strip().lower()
        self.location_imp = float(input("How important is the location for you? \n In a scale from 1 to 10")) 
        self.age = int(input("How old are you? "))
        self.music = input("What is your favorite type of music? (techno/commercial/reggaeton) ")
        self.code = input("How do you dress for parties? (casual/formal/fancy/alternative) ")
        self.ticket = int(input("Which price are you looking for (2 drinks included) "))
        self.ticket_imp = float(input("How important is the price to you from 1 to 10? "))
        self.drink = int(input("What is the Maximum you would pay for a drink? "))
        self.drink_imp = float(input("How likely are you to buy an extra drink from 1 to 10? "))
        self.lists = bool(input("Do you like to be in a list? (yes/no) ").lower().strip()[0] == 'y')
        self.queue = input("How importanty is queuing for you? (high/medium/low) ").strip().lower()       
        self.vip = bool(input("Do you want to go VIP? (yes/no) ").lower().strip()[0] == 'y')
        self.inter = bool(input("Do you enjoy an international atmosphere? (yes/no)) ").lower().strip()[0] == 'y')
        self.df = df

user = Subject(df)     # para meter los valores del user

# test.location == df.iloc[2][1]
# test.age >= df.iloc[2][5] and test.age <= df.iloc[2][6]
# test.music == df.iloc[2][7]   NO FUNCIONA
# test.code == df.iloc[2][4]
# test.ticket == df.iloc[2][2]+1 or test.ticket == df.iloc[2][2]+2 or test.ticket == df.iloc[2][2] or test.ticket == df.iloc[2][2]-1 or test.ticket == df.iloc[2][2]-2
# user.drink == df.iloc[row][3] or user.drink == df.iloc[row][3]+1 or user.drink == df.iloc[row][3]-1
# bool(input("Do you like to be in a list? (yes/no) ").lower().strip()[0] == 'y') == df.iloc[2][8]
test.queue == df.iloc[2][9]

def points(user,df,row):                             
    points = 0
    if user.location == df.iloc[row][1]:
        points += 1*(user.location_imp/10)
    else: 
        points += 0
        pass
    if user.ticket == df.iloc[row][2]+1 or user.ticket == df.iloc[row][2]+2 or user.ticket == df.iloc[row][2] or user.ticket == df.iloc[row][2]-1 or user.ticket == df.iloc[row][2]-2:
        points += 1*(user.ticket_imp/10)
    else: 
        points += 0
        pass
    if user.drink == df.iloc[row][3] or user.drink == df.iloc[row][3]+1 or user.drink == df.iloc[row][3]-1:
        points += 1*(user.drink_imp/10)
    else: 
        points += 0
        pass
    if user.code == df.iloc[row][4]:
        points += 1
    else: 
        points += 0
        pass
    if user.age > df.iloc[row][5] and user.age < df.iloc[row][6]:
        points += 1
    else: 
        points += 0
        pass
    if user.music in df.iloc[row][7]:    # NO FUNCIONA (Mejorar)
        points += 1
    else: 
        points += 0
        pass
    if user.lists == df.iloc[row][8]:
        points += 1
    else: 
        points += 0
        pass
    if user.queue == df.iloc[row][9]:
        points += 1
    else: 
        points += 0
        pass
    if user.vip == df.iloc[row][10]:
        points += 1
    else: 
        points += 0
        pass
    if user.inter == df.iloc[row][11]:
        points += 1
    else: 
        points += 0
    return float(points)

def best_party(user,df):
    points_list = []
    for i in range(len(df)):
        points_list.append(points(user,df,i))
    print("Your club of preference is: ", df.iloc[points_list.index(max(points_list))][0] )
    print(f"Your affinity to this club is: {max(points_list)} out of 10 points")
    return points_list
    

best_party(user,df)

# por si alguien sabe crear un dataset nuevo con una nueva columna "points" y luego ordenarla con los que tengan mayor puntuaciÃ³n.

df_new = df

def points_col(best_party()):
  for i in best_party()